/* automatically generated by rust-bindgen 0.60.1 */

pub const __USING_MINT8: u32 = 0;
pub const INT8_MAX: u32 = 127;
pub const INT8_MIN: i32 = -128;
pub const UINT8_MAX: u32 = 255;
pub const INT16_MAX: u32 = 32767;
pub const INT16_MIN: i32 = -32768;
pub const INT32_MAX: u32 = 2147483647;
pub const INT32_MIN: i32 = -2147483648;
pub const INT64_MAX: u64 = 9223372036854775807;
pub const INT64_MIN: i64 = -9223372036854775808;
pub const INT_LEAST8_MAX: u32 = 127;
pub const INT_LEAST8_MIN: i32 = -128;
pub const UINT_LEAST8_MAX: u32 = 255;
pub const INT_LEAST16_MAX: u32 = 32767;
pub const INT_LEAST16_MIN: i32 = -32768;
pub const INT_LEAST32_MAX: u32 = 2147483647;
pub const INT_LEAST32_MIN: i32 = -2147483648;
pub const INT_LEAST64_MAX: u64 = 9223372036854775807;
pub const INT_LEAST64_MIN: i64 = -9223372036854775808;
pub const INT_FAST8_MAX: u32 = 127;
pub const INT_FAST8_MIN: i32 = -128;
pub const UINT_FAST8_MAX: u32 = 255;
pub const INT_FAST16_MAX: u32 = 32767;
pub const INT_FAST16_MIN: i32 = -32768;
pub const INT_FAST32_MAX: u32 = 2147483647;
pub const INT_FAST32_MIN: i32 = -2147483648;
pub const INT_FAST64_MAX: u64 = 9223372036854775807;
pub const INT_FAST64_MIN: i64 = -9223372036854775808;
pub const INTPTR_MAX: u32 = 32767;
pub const INTPTR_MIN: i32 = -32768;
pub const INTMAX_MAX: u64 = 9223372036854775807;
pub const INTMAX_MIN: i64 = -9223372036854775808;
pub const PTRDIFF_MAX: u32 = 32767;
pub const PTRDIFF_MIN: i32 = -32768;
pub const SIG_ATOMIC_MAX: u32 = 127;
pub const SIG_ATOMIC_MIN: i32 = -128;
pub const true_: u32 = 1;
pub const false_: u32 = 0;
pub const __bool_true_false_are_defined: u32 = 1;
pub type int_least8_t = i8;
pub type uint_least8_t = u8;
pub type int_least16_t = i16;
pub type uint_least16_t = u16;
pub type int_least32_t = i32;
pub type uint_least32_t = u32;
pub type int_least64_t = i64;
pub type uint_least64_t = u64;
pub type int_fast8_t = i8;
pub type uint_fast8_t = u8;
pub type int_fast16_t = i16;
pub type uint_fast16_t = u16;
pub type int_fast32_t = i32;
pub type uint_fast32_t = u32;
pub type int_fast64_t = i64;
pub type uint_fast64_t = u64;
pub type intmax_t = i64;
pub type uintmax_t = u64;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct CDC_LineEncoding_t {
    pub BaudRateBPS: u32,
    pub CharFormat: u8,
    pub ParityType: u8,
    pub DataBits: u8,
}
#[test]
fn bindgen_test_layout_CDC_LineEncoding_t() {
    assert_eq!(
        ::std::mem::size_of::<CDC_LineEncoding_t>(),
        7usize,
        concat!("Size of: ", stringify!(CDC_LineEncoding_t))
    );
    assert_eq!(
        ::std::mem::align_of::<CDC_LineEncoding_t>(),
        1usize,
        concat!("Alignment of ", stringify!(CDC_LineEncoding_t))
    );
    fn test_field_BaudRateBPS() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<CDC_LineEncoding_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).BaudRateBPS) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(CDC_LineEncoding_t),
                "::",
                stringify!(BaudRateBPS)
            )
        );
    }
    test_field_BaudRateBPS();
    fn test_field_CharFormat() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<CDC_LineEncoding_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).CharFormat) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(CDC_LineEncoding_t),
                "::",
                stringify!(CharFormat)
            )
        );
    }
    test_field_CharFormat();
    fn test_field_ParityType() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<CDC_LineEncoding_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ParityType) as usize - ptr as usize
            },
            5usize,
            concat!(
                "Offset of field: ",
                stringify!(CDC_LineEncoding_t),
                "::",
                stringify!(ParityType)
            )
        );
    }
    test_field_ParityType();
    fn test_field_DataBits() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<CDC_LineEncoding_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).DataBits) as usize - ptr as usize
            },
            6usize,
            concat!(
                "Offset of field: ",
                stringify!(CDC_LineEncoding_t),
                "::",
                stringify!(DataBits)
            )
        );
    }
    test_field_DataBits();
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct USB_Request_Header_t {
    pub bmRequestType: u8,
    pub bRequest: u8,
    pub wValue: u16,
    pub wIndex: u16,
    pub wLength: u16,
}
#[test]
fn bindgen_test_layout_USB_Request_Header_t() {
    assert_eq!(
        ::std::mem::size_of::<USB_Request_Header_t>(),
        8usize,
        concat!("Size of: ", stringify!(USB_Request_Header_t))
    );
    assert_eq!(
        ::std::mem::align_of::<USB_Request_Header_t>(),
        1usize,
        concat!("Alignment of ", stringify!(USB_Request_Header_t))
    );
    fn test_field_bmRequestType() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<USB_Request_Header_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).bmRequestType) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(USB_Request_Header_t),
                "::",
                stringify!(bmRequestType)
            )
        );
    }
    test_field_bmRequestType();
    fn test_field_bRequest() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<USB_Request_Header_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).bRequest) as usize - ptr as usize
            },
            1usize,
            concat!(
                "Offset of field: ",
                stringify!(USB_Request_Header_t),
                "::",
                stringify!(bRequest)
            )
        );
    }
    test_field_bRequest();
    fn test_field_wValue() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<USB_Request_Header_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).wValue) as usize - ptr as usize
            },
            2usize,
            concat!(
                "Offset of field: ",
                stringify!(USB_Request_Header_t),
                "::",
                stringify!(wValue)
            )
        );
    }
    test_field_wValue();
    fn test_field_wIndex() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<USB_Request_Header_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).wIndex) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(USB_Request_Header_t),
                "::",
                stringify!(wIndex)
            )
        );
    }
    test_field_wIndex();
    fn test_field_wLength() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<USB_Request_Header_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).wLength) as usize - ptr as usize
            },
            6usize,
            concat!(
                "Offset of field: ",
                stringify!(USB_Request_Header_t),
                "::",
                stringify!(wLength)
            )
        );
    }
    test_field_wLength();
}
extern "C" {
    pub fn LUFA_USB_Init();
}
extern "C" {
    pub fn LUFA_USB_Task();
}
extern "C" {
    pub fn LUFA_get_line_encoding() -> *mut CDC_LineEncoding_t;
}
extern "C" {
    pub fn LUFA_set_line_encoding(encoding_data: CDC_LineEncoding_t);
}
extern "C" {
    pub fn LUFA_get_last_request_header() -> *mut USB_Request_Header_t;
}
extern "C" {
    pub fn LUFA_Endpoint_ConfigureEndpoint(address: u8, type_: u8, size: u16, banks: u8) -> bool;
}
extern "C" {
    pub fn LUFA_Endpoint_ClearSETUP();
}
extern "C" {
    pub fn LUFA_Endpoint_ClearStatusStage();
}
extern "C" {
    pub fn LUFA_Endpoint_ClearOUT();
}
extern "C" {
    pub fn LUFA_Endpoint_ClearIN();
}
extern "C" {
    pub fn LUFA_Endpoint_Write_Control_Stream_LE(data: *const u8, size: u16);
}
extern "C" {
    pub fn LUFA_Endpoint_Read_Control_Stream_LE(data_dest: *mut u8, len: u16);
}
extern "C" {
    pub fn LUFA_EP_write_line_encoding();
}
extern "C" {
    pub fn LUFA_EP_read_line_encoding();
}
extern "C" {
    pub fn LUFA_Endpoint_Select(ep: u8);
}
extern "C" {
    pub fn LUFA_Endpoint_IsOUTReceived() -> bool;
}
extern "C" {
    pub fn LUFA_Endpoint_Write_Stream_LE(data: *const u8, len: u16);
}
extern "C" {
    pub fn LUFA_Endpoint_Read_Stream_LE(data: *mut u8, len: u16) -> u16;
}
extern "C" {
    pub fn LUFA_Endpoint_Full() -> bool;
}
extern "C" {
    pub fn LUFA_Endpoint_WaitUntilReady();
}
extern "C" {
    pub fn get_state() -> u8;
}
extern "C" {
    pub fn set_state(new_state: u8);
}
extern "C" {
    pub fn CDC_Task();
}
extern "C" {
    pub fn LUFA_Endpoint_read_byte() -> u8;
}
extern "C" {
    pub fn LUFA_Endpoint_write_byte(data: u8);
}
extern "C" {
    pub fn LUFA_Endpoint_BytesInEndpoints() -> u16;
}
